import { Bot } from "grammy";
import message from "./classes/Message";
import config from "./config/config";
import rate from "./classes/Rate";
import finance from "./classes/Finance";
import { user } from "./classes/User";

const token = config.getToken();

if (!token) {
  throw new Error("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º");
}

const bot = new Bot(token);

const keyboard = config.setKeybord();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.api.setMyCommands([
  { command: "set_current_rate", description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å" },
  { command: "get_current_rate", description: "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å" },
  { command: "get_statistics_for_month", description: "–¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü" },
  { command: "get_statistics_for_month_family", description: "–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü" },
  { command: "get_statistics_for_all", description: "–¢—Ä–∞—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è" },
  { command: "get_statistics_for_all_family", description: "–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è" },
  { command: "remove_last_row", description: "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å" },
]);

// –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å
bot.command("set_current_rate", async (ctx) => {
  ctx.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å");
  if (ctx.message?.text) {
    message.setLastMessage(ctx.message?.text);
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
bot.command("get_current_rate", async (ctx) => {
  const currentRate = await rate.getRate();
  await ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å - ${currentRate?.rate}`);
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
bot.command("get_statistics_for_month", async (ctx) => {
  let response = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ—Ç';

  if (ctx?.from?.id) {
    const currentUser = await user.getUserByTelegramId(ctx.from.id);

    if (currentUser) {
      response = await finance.showMonthlyExpensesAsMdString(currentUser.id)
    }
  }

  ctx.reply(response, {
    parse_mode: "MarkdownV2",
  });
});


// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
bot.command("get_statistics_for_month_family", async (ctx) => {
  const response = await finance.showMonthlyExpensesAsMdString(0)

  ctx.reply(response, {
    parse_mode: "MarkdownV2",
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
bot.command("get_statistics_for_all", async (ctx) => {
  let response = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ—Ç';

  if (ctx?.from?.id) {
    const currentUser = await user.getUserByTelegramId(ctx.from.id);

    if (currentUser) {
      response = await finance.showAllExpensesAsMdString(currentUser.id);
    }
  }

  ctx.reply(response, {
    parse_mode: "MarkdownV2",
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
bot.command("get_statistics_for_all_family", async (ctx) => {
  const response = await finance.showAllExpensesAsMdString(0);

  ctx.reply(response, {
    parse_mode: "MarkdownV2",
  });
});

// –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
bot.command("remove_last_row", async (ctx) => {
  const removeObj = await finance.removeLastRow();
  console.log(removeObj);

  if (!removeObj) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
    return;
  }

  ctx.reply(`–ó–∞–ø–∏—Å—å \n\n ${removeObj.value}—Ä ${removeObj.desc ? removeObj.desc : ''} \n\n –£–¥–∞–ª–µ–Ω–∞`, {
    parse_mode: "MarkdownV2",
  });
});

// –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (ctx) => {
  const currentMessage = ctx.message.text;

  if (!currentMessage || !config.isUserInWhiteList(ctx.from.id)) {
    await ctx.reply("–í–∞—à id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ");
    return;
  }

  const currentUser = await user.getUserByTelegramId(ctx.from.id);

  await message.getLastMessageFromDb();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å
  if (message.getLastMessage() === "/set_current_rate") {
    const rateValue = currentMessage?.match(/[0-9]+(\.[0-9]+)?/g);
    let setRate: any;

    if (rateValue && rateValue[0]) {
      setRate = await rate.setRate(parseFloat(rateValue[0]));
    }

    if (setRate && setRate.rate) {
      await ctx.reply(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫—É—Ä—Å - ${setRate.rate}`);
    } else {
      await ctx.reply("–û—à–∏–±–∫–∞");
    }

    if (currentMessage) {
      message.setLastMessage(currentMessage);
    }

    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞
  if (currentMessage && finance.checkFinanceTypes(currentMessage)) {
    let reply = "‚úÖ";

    const processedMessage = message.processingMessage(
      message.getLastMessage()
    );

    const savedFinance =
      processedMessage.data &&
      (await finance.saveToDb({
        ...processedMessage.data,
        type: finance.getFinanceTypeCode(currentMessage),
        user: currentUser?.id,
      }));

    if (!savedFinance?.id) {
      reply = "üò°";
    }

    await ctx.reply(reply);
  } else {
    if (currentMessage) {
      message.setLastMessage(currentMessage);
    }

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø", {
      reply_markup: keyboard,
    });
  }

  //–§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (currentMessage) {
    message.setLastMessage(currentMessage);
  }
});

bot.start();
